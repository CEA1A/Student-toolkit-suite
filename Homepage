#project structure
student-tools/
├── public/
│   ├── index.html           # Homepage
│   ├── tools.html           # Tools dashboard
│   ├── css/
│   │   └── styles.css       # Custom styles
│   └── assets/              # Icons, etc.
├── netlify/
│   └── functions/           # Serverless functions
│       ├── image-compress.js
│       └── txt-to-pdf.js
├── netlify.toml             # Netlify config
└── package.json
#Homepage
<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Toolkit | Netlify</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body class="bg-gradient-to-br from-indigo-50 to-cyan-100 dark:from-gray-900 dark:to-slate-800 min-h-screen">
  <!-- Header -->
  <header class="py-6 px-4 sm:px-12 backdrop-blur-lg bg-white/80 dark:bg-slate-900/80 sticky top-0 z-50">
    <div class="max-w-6xl mx-auto flex justify-between items-center">
      <div class="flex items-center gap-2">
        <svg class="w-8 h-8 text-indigo-600" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path></svg>
        <span class="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-600 to-cyan-500">
          Student Toolkit
        </span>
      </div>
      <button id="theme-toggle" class="p-2 rounded-full bg-gray-200 dark:bg-slate-700">
        <svg class="w-6 h-6 text-gray-800 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>
      </button>
    </div>
  </header>

  <!-- Hero Section -->
  <section class="py-16 px-4 text-center max-w-3xl mx-auto">
    <h1 class="text-4xl md:text-6xl font-extrabold mb-6">
      <span class="block">Your All-in-One</span>
      <span class="block mt-2 text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-cyan-500">
        Student Productivity Hub
      </span>
    </h1>
    <p class="text-xl text-gray-600 dark:text-gray-300 mb-10">
      Free tools to compress images, convert documents, and ace your assignments.
      <span class="block font-semibold mt-2">Zero ads. No tracking. Just results.</span>
    </p>
    <a href="/tools.html" class="inline-block px-8 py-4 bg-indigo-600 hover:bg-indigo-700 text-white font-bold rounded-full shadow-lg transition transform hover:-translate-y-1">
      Start Using Tools
    </a>
  </section>

  <!-- Footer -->
  <footer class="py-8 text-center text-gray-600 dark:text-gray-400 mt-auto">
    <p>Built with ❤️ for students | Deployed on Netlify</p>
  </footer>

  <script>
    // Dark mode toggle
    document.getElementById('theme-toggle').addEventListener('click', () => {
      document.documentElement.classList.toggle('dark');
    });
  </script>
</body>
</html>
#Tool Dashboard
<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Student Tools | Netlify</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/compressorjs/1.2.1/compressor.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body class="bg-gray-50 dark:bg-slate-900 min-h-screen">
  <!-- Header -->
  <header class="py-6 px-4 sm:px-12 backdrop-blur-lg bg-white/80 dark:bg-slate-900/80 sticky top-0 z-50">
    <div class="max-w-6xl mx-auto flex justify-between items-center">
      <a href="/index.html" class="flex items-center gap-2">
        <svg class="w-8 h-8 text-indigo-600" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path></svg>
        <span class="text-xl font-bold">Student Toolkit</span>
      </a>
    </div>
  </header>

  <!-- Tools Section -->
  <main class="max-w-5xl mx-auto py-12 px-4">
    <div class="text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-bold mb-4">Student Productivity Tools</h2>
      <p class="text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
        All tools run directly in your browser. Your files never leave your device.
      </p>
    </div>

    <!-- Tool Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- Image Compressor -->
      <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg overflow-hidden border border-gray-200 dark:border-slate-700">
        <div class="p-6 border-b border-gray-200 dark:border-slate-700">
          <div class="flex items-center gap-3 mb-4">
            <div class="bg-indigo-100 dark:bg-indigo-900/50 p-2 rounded-lg">
              <svg class="w-6 h-6 text-indigo-600 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
            </div>
            <h3 class="text-xl font-bold">Image Compressor</h3>
          </div>
          <p class="text-gray-600 dark:text-gray-400 mb-6">
            Reduce image file size without losing quality. Perfect for projects and submissions.
          </p>
          <div class="space-y-4">
            <input type="file" id="image-upload" accept="image/*" class="hidden">
            <label for="image-upload" class="block cursor-pointer py-3 px-4 bg-gray-100 dark:bg-slate-700 rounded-lg text-center border-2 border-dashed border-gray-300 dark:border-slate-600 hover:border-indigo-400 transition">
              <span>Drag & drop or <span class="text-indigo-600 dark:text-indigo-400 font-medium">browse files</span></span>
            </label>
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium mb-2">Quality (0-100)</label>
                <input type="range" id="quality" min="0" max="100" value="80" class="w-full">
              </div>
              <div>
                <label class="block text-sm font-medium mb-2">Max Width (px)</label>
                <input type="number" id="max-width" value="1920" class="w-full p-2 border rounded-lg dark:bg-slate-700">
              </div>
            </div>
            <button id="compress-btn" class="w-full py-3 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg font-medium flex items-center justify-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
              Compress Image
            </button>
          </div>
        </div>
        <div id="image-results" class="p-4 bg-gray-50 dark:bg-slate-900/50 hidden">
          <div class="flex justify-between items-center mb-3">
            <span class="text-sm font-medium">Original: <span id="original-size">-</span></span>
            <span class="text-sm font-medium text-green-600">Compressed: <span id="compressed-size">-</span></span>
          </div>
          <div class="flex gap-4">
            <div class="flex-1 text-center">
              <img id="original-preview" class="max-h-40 mx-auto mb-2 rounded-lg shadow">
              <span class="text-xs opacity-75">Original</span>
            </div>
            <div class="flex-1 text-center">
              <img id="compressed-preview" class="max-h-40 mx-auto mb-2 rounded-lg shadow">
              <span class="text-xs opacity-75">Compressed</span>
            </div>
          </div>
          <button id="download-btn" class="mt-4 w-full py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium">
            Download Compressed Image
          </button>
        </div>
      </div>

      <!-- Text to PDF -->
      <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg overflow-hidden border border-gray-200 dark:border-slate-700">
        <div class="p-6 border-b border-gray-200 dark:border-slate-700">
          <div class="flex items-center gap-3 mb-4">
            <div class="bg-amber-100 dark:bg-amber-900/50 p-2 rounded-lg">
              <svg class="w-6 h-6 text-amber-600 dark:text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
            </div>
            <h3 class="text-xl font-bold">Text to PDF</h3>
          </div>
          <p class="text-gray-600 dark:text-gray-400 mb-6">
            Convert notes, essays, or code snippets to PDF for submissions.
          </p>
          <div class="space-y-4">
            <textarea id="pdf-text" rows="8" class="w-full p-4 border rounded-lg dark:bg-slate-700" placeholder="Paste your text here..."></textarea>
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium mb-2">Page Size</label>
                <select id="page-size" class="w-full p-2 border rounded-lg dark:bg-slate-700">
                  <option value="a4">A4</option>
                  <option value="letter">Letter</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium mb-2">Font Size</label>
                <select id="font-size" class="w-full p-2 border rounded-lg dark:bg-slate-700">
                  <option value="12">12pt</option>
                  <option value="14" selected>14pt</option>
                  <option value="16">16pt</option>
                </select>
              </div>
            </div>
            <button id="generate-pdf" class="w-full py-3 bg-amber-600 hover:bg-amber-700 text-white rounded-lg font-medium flex items-center justify-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
              Generate PDF
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- More Tools Coming Soon -->
    <div class="mt-16 text-center">
      <h3 class="text-2xl font-bold mb-4">More Tools Coming Soon</h3>
      <div class="flex flex-wrap justify-center gap-4">
        <div class="bg-white dark:bg-slate-800 p-4 rounded-lg border border-gray-200 dark:border-slate-700 opacity-60">
          <div class="bg-gray-100 dark:bg-slate-700 p-3 rounded-lg mb-2 inline-block">
            <svg class="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path></svg>
          </div>
          <p>PDF Merger</p>
        </div>
        <!-- Additional tool placeholders... -->
      </div>
    </div>
  </main>

  <script>
    // Image Compression Logic
    document.addEventListener('DOMContentLoaded', () => {
      const imageUpload = document.getElementById('image-upload');
      const compressBtn = document.getElementById('compress-btn');
      const downloadBtn = document.getElementById('download-btn');
      const originalPreview = document.getElementById('original-preview');
      const compressedPreview = document.getElementById('compressed-preview');
      const originalSize = document.getElementById('original-size');
      const compressedSize = document.getElementById('compressed-size');
      const resultsSection = document.getElementById('image-results');
      
      let originalImage = null;
      let compressedImage = null;

      // Handle file selection
      imageUpload.addEventListener('change', (e) => {
        if (e.target.files && e.target.files[0]) {
          originalImage = e.target.files[0];
          originalSize.textContent = formatBytes(originalImage.size);
          
          const reader = new FileReader();
          reader.onload = (event) => {
            originalPreview.src = event.target.result;
          };
          reader.readAsDataURL(originalImage);
        }
      });

      // Compress image
      compressBtn.addEventListener('click', () => {
        if (!originalImage) return;
        
        compressBtn.innerHTML = `<svg class="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Compressing...`;
        
        const quality = parseInt(document.getElementById('quality').value) / 100;
        const maxWidth = parseInt(document.getElementById('max-width').value);
        
        new Compressor(originalImage, {
          quality,
          maxWidth,
          success(result) {
            compressedImage = result;
            compressedSize.textContent = formatBytes(compressedImage.size);
            
            const reader = new FileReader();
            reader.onload = (event) => {
              compressedPreview.src = event.target.result;
              resultsSection.classList.remove('hidden');
              compressBtn.innerHTML = `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg> Compress Image`;
            };
            reader.readAsDataURL(compressedImage);
          },
          error(err) {
            console.error(err.message);
            alert('Compression failed. Please try another image.');
            compressBtn.innerHTML = `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg> Compress Image`;
          }
        });
      });

      // Download compressed image
      downloadBtn.addEventListener('click', () => {
        if (compressedImage) {
          saveAs(compressedImage, `compressed-${Date.now()}.jpg`);
        }
      });

      // Helper function
      function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i];
      }
    });

    // Text to PDF Logic
    document.getElementById('generate-pdf').addEventListener('click', async () => {
      const text = document.getElementById('pdf-text').value;
      if (!text.trim()) {
        alert('Please enter some text');
        return;
      }

      const btn = document.getElementById('generate-pdf');
      btn.innerHTML = `<svg class="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Generating PDF...`;
      
      try {
        // Using Netlify Function for PDF generation
        const response = await fetch('/.netlify/functions/txt-to-pdf', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            text: text,
            fontSize: document.getElementById('font-size').value,
            pageSize: document.getElementById('page-size').value
          })
        });

        if (!response.ok) throw new Error('PDF generation failed');
        
        const blob = await response.blob();
        saveAs(blob, `document-${Date.now()}.pdf`);
      } catch (error) {
        console.error(error);
        alert('Failed to generate PDF. Please try again.');
      } finally {
        btn.innerHTML = `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg> Generate PDF`;
      }
    });
  </script>
</body>
</html>
#Netlify function
const sharp = require('sharp');

exports.handler = async (event) => {
  try {
    const body = JSON.parse(event.body);
    const imageBuffer = Buffer.from(body.image.split(',')[1], 'base64');
    
    const compressed = await sharp(imageBuffer)
      .jpeg({ quality: body.quality || 80 })
      .resize({ width: body.maxWidth || 1920 })
      .toBuffer();

    return {
      statusCode: 200,
      body: compressed.toString('base64'),
      isBase64Encoded: true,
      headers: {
        'Content-Type': 'image/jpeg',
        'Content-Disposition': 'attachment; filename="compressed.jpg"'
      }
    };
  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify({ error: error.message })
    };
  }
};
#Text to pdf
const { PDFDocument, StandardFonts } = require('pdf-lib');

exports.handler = async (event) => {
  try {
    const { text, fontSize = 14, pageSize = 'a4' } = JSON.parse(event.body);
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage();
    
    // Set page dimensions
    const dimensions = {
      a4: [595, 842],
      letter: [612, 792]
    }[pageSize] || [595, 842];
    
    page.setSize(dimensions[0], dimensions[1]);
    
    // Add text
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const margin = 50;
    const textWidth = dimensions[0] - margin * 2;
    
    page.drawText(text, {
      x: margin,
      y: dimensions[1] - margin - fontSize,
      size: parseInt(fontSize),
      font,
      maxWidth: textWidth,
      lineHeight: fontSize * 1.2
    });
    
    const pdfBytes = await pdfDoc.save();
    return {
      statusCode: 200,
      body: Buffer.from(pdfBytes).toString('base64'),
      isBase64Encoded: true,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': 'attachment; filename="converted.pdf"'
      }
    };
  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify({ error: error.message })
    };
  }
};
#Deployement Configuration
[build]
  command = "npm install && npm run build"
  publish = "public"
  functions = "netlify/functions"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[dev]
  framework = "#static"
{
  "name": "student-tools",
  "version": "1.0.0",
  "scripts": {
    "build": "echo 'Build complete'"
  },
  "dependencies": {
    "compressorjs": "^1.2.1",
    "file-saver": "^2.0.5",
    "pdf-lib": "^1.17.1",
    "sharp": "^0.33.2"
  }
}
